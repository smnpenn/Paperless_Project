/*
 * Paperless Rest Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Paperless.ServiceAgents.Interfaces;
using Paperless.BusinessLogic.Interfaces;
using System.Threading.Tasks;
using AutoMapper;
using Paperless.BusinessLogic;
using Paperless.DAL.Interfaces;
using Microsoft.Extensions.Logging;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SearchApiController : ControllerBase
    {
        ILogger _log;
        private readonly IDocumentLogic _documentLogic;

        /// <summary>
        /// Documents API Controller
        /// </summary>
        /// <param name="repository"></param>
        /// <param name="mapper"></param>
        /// <param name="rabbitMQService"></param>
        /// <param name="minIOService"></param>
        /// <param name="elasticSearchServiceAgent"></param>
        public SearchApiController(ILogger<SearchApiController> logger, IDocumentLogic documentLogic)
        {
            _log = logger;
            _documentLogic = documentLogic;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="term"></param>
        /// <param name="limit"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/search/autocomplete")]
        [ValidateModelState]
        [SwaggerOperation("AutoComplete")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Success")]
        public async Task<IActionResult> Search(string term, int? limit)
        {
            _log.LogInformation("searching for doc");
            var results = await _documentLogic.SearchDocument(term, limit);
            return Ok(results);
        }
    }
}
